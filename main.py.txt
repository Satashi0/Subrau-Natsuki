
import discord
from discord.ext import commands
import os
import threading
from flask import Flask

# Configuration du serveur Flask (webserver.py simul√© ici pour exemple)
app = Flask(__name__)

@app.route("/")
def home():
    return "Bot is running!"

# Fonction pour d√©marrer le serveur Flask
def run_flask():
    app.run(host="0.0.0.0", port=5000)

# Token du bot (d√©finissez TOKENbot dans les variables d'environnement sur Railway)
TOKEN = os.getenv("TOKENbot")
if not TOKEN:
    raise ValueError("Le token du bot n'est pas d√©fini. Assurez-vous de l'ajouter dans les variables d'environnement.")

# Configuration des intents Discord
intents = discord.Intents.default()
intents.members = True
intents.message_content = True
intents.reactions = True

bot = commands.Bot(command_prefix="!", intents=intents)

# ID du salon o√π les messages seront envoy√©s
CHANNEL_ID = 1309243869157658744  # Remplace avec l'ID de ton salon

# Liste des r√¥les et emojis correspondants
roles_config = {
    "genre": {
        "Homme": "‚ôÇÔ∏è",
        "Femme": "‚ôÄÔ∏è",
        "Autre": "‚òòÔ∏è"
    },
    "√¢ge": {
        "Mineur": "üîû",
        "Majeur": "‚úÖ"
    },
    "orientation": {
        "H√©t√©rosexuel": "‚ù§Ô∏è",
        "homosexuel": "üè≥Ô∏è‚Äçüåà",
        "Compliqu√©": "ü§î"
    },
    "relation": {
        "c√©libataire": "üíî",
        "En couple": "üíû"
    }
}

@bot.event
async def on_ready():
    print(f"Connect√© en tant que {bot.user}!")

@bot.command()
@commands.has_permissions(administrator=True)
async def setup_roles(ctx):
    """Commande pour configurer les r√¥les r√©actifs."""
    channel = bot.get_channel(CHANNEL_ID)

    if not channel:
        await ctx.send("Salon introuvable. V√©rifiez l'ID du salon.")
        return

    for category, roles in roles_config.items():
        description = "\n".join([f"{emoji} : {role}" for role, emoji in roles.items()])
        embed = discord.Embed(title=f"Choisissez votre {category.capitalize()}", description=description, color=0x00ff00)
        message = await channel.send(embed=embed)

        for emoji in roles.values():
            await message.add_reaction(emoji)

@bot.event
async def on_raw_reaction_add(payload):
    if payload.user_id == bot.user.id:
        return

    guild = bot.get_guild(payload.guild_id)
    if not guild:
        return

    member = guild.get_member(payload.user_id)
    if not member:
        return

    for category, roles in roles_config.items():
        for role_name, emoji in roles.items():
            if str(payload.emoji) == emoji:
                role = discord.utils.get(guild.roles, name=role_name)
                if role:
                    await member.add_roles(role)
                    print(f"Ajout√© {role.name} √† {member.name}")
                return

@bot.event
async def on_raw_reaction_remove(payload):
    if payload.user_id == bot.user.id:
        return

    guild = bot.get_guild(payload.guild_id)
    if not guild:
        return

    member = guild.get_member(payload.user_id)
    if not member:
        return

    for category, roles in roles_config.items():
        for role_name, emoji in roles.items():
            if str(payload.emoji) == emoji:
                role = discord.utils.get(guild.roles, name=role_name)
                if role:
                    await member.remove_roles(role)
                    print(f"Retir√© {role.name} de {member.name}")
                return

# D√©marre Flask dans un thread s√©par√©
threading.Thread(target=run_flask).start()

# Lancement du bot Discord
bot.run(TOKEN)

